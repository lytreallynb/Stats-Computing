# Help
?t.test                				# help on t.test
??"Student"            				# search help

# Tidyverse
library(tidyverse)     				# load tidyverse

# Variables
a <- 10                				# assign variable
c(1,2,3)               				# create vector
a1 <- 3                				# variable
b_2 <- 4
C.3 <- a1*b_2 + a1/b_2 				# operations
d <- a7 + 1            				# error (a7 not exist)
x1 <- 1; x2 = 1; x1==x2  				# assign, equal
2*3; 9/3               				# math ops
2 + 9/3                				# precedence
2 + (9/3)              				# safe grouping

# Math
$y = β0 + β1 x + ε$    				# inline math
$$P(D=d)=log10(1+1/d)$$ 				# block math
abs(-5)                				# absolute value
mean(c(1,2,3))         				# average
mean(abs(rnorm(10000) <= 1)) 				# proportion in [-1,1]

# Functions
paste(..., sep=" ", collapse=NULL) 			# join strings
exp(1)                 				# e^1
log(10)                				# ln(10)
log(64, base=2)        				# log base 2
paste("This","is","a") 				# concatenate
rnorm(5, mean=0, sd=1) 				# random normal values
sum(d)                 				# sum
min(d)                 				# min
max(d)                 				# max
table(d)               				# frequency

# Functions (custom)
x2 <- function(x){x^2} 				# define a square function
x2(4)                  				# use function
f <- function(name, opening="hi", closing="bye"){
  paste(opening,name,closing)
}
f("Ernie")             				# call with args

# Vectors
d <- c(7,3,4,9,9,5,5,0,9,5) 				# create a vector
d[1]                   				# first element
d[4:10]                				# slice
d + 1                  				# add 1
1:10                   				# sequence
d + 1:10               				# vector add
length(99)             				# length
some_odds <- c(7,9,11) 				# create vector
length(some_odds)      				# length
some_odds + some_odds  				# elementwise add
1:5; seq(1,10,2)       				# sequences
sum(1:10)              				# sum
c(TRUE,TRUE)&c(TRUE,FALSE) 				# elementwise AND
(named_vec <- c(A=1,B=2))  				# named vector
names(named_vec)       				# names
LETTERS[1:10]          				# A..J
letters[c(1,5,9,15,21)]				# vowels
numeric_vec <- c(2.0,-0.2) 				# numeric
logical_vec <- c(TRUE,FALSE) 				# logical
char_vec <- c("This","is","a") 			# char

# Logicals
TRUE + TRUE            				# 2 (treated as numeric)
TRUE + FALSE           				# 1
mean(c(TRUE, FALSE))   				# 0.5
1 & TRUE               				# logical as numeric

# Lists
ll <- list("A",7,TRUE) 				# list can have different types
ll[c(1,3)]             				# subset list
ll[[3]]                				# element
luke <- list(father="Anakin",mother="Amidala")
luke$father            				# access by $

# Iteration
for(animal in c("tiger","llama","cat")){
  print(paste("animal is", animal))
}
map(1:6, ~ .x^2)       				# map
map2(colors,animals,paste) 				# map2
map_dbl(1:6,~.x^2)    				# map to dbl
reduce(1:10,~.x+.y,0) 				# reduce
accumulate(1:5,~.x+.y,0)# accumulate
keep(1:10,~.x%%2==0)   				# even numbers
discard(1:10,~.x%%2==0)				# odd numbers

# Tables
n <- 20
var1 <- rnorm(n,7,2)
var2 <- rnorm(n,var1,3)
mydata <- data.frame(x=var1,y=var2)
head(mydata)           				# preview
mydata[3,2]            				# row3 col2
mutate(mydata,z=x/y)   				# add column
summarize(mydata,mean_x=mean(x)) 			# summarize
group_by(mydata,x>median(x)) %>% summarize_all(mean) 					# group summarize
mutate(mydata,z=x+y) %>% group_by(cut(z,3)) %>% summarize_all(mean)

# Data: starwars
dim(starwars)          				# size
colnames(starwars)     				# column names
class(starwars$height) 				# column type
map_chr(starwars, class) 				# each column type
count(starwars, homeworld, species) 			# counts
group_by(starwars, homeworld)       			# group

# Plots
ggplot(mydata,aes(x=x,y=y))+geom_point()  							# scatter
ggplot(mydata,aes(x=x))+geom_density(fill="blue",alpha=0.25) 				# density
mutate(mydata,pos_u=u>0) %>% ggplot(aes(x=x,y=y))+geom_point()+facet_wrap(~pos_u) 	# facets
ggplot(starwars,aes(mass))+geom_histogram()        						# hist mass
ggplot(starwars,aes(mass,fill=sex))+geom_histogram() 					# hist by sex
ggplot(starwars,aes(height,mass))+geom_point()     						# scatter

# Letters
LETTERS[17]             				# Q
LETTERS[c(1,26)]        				# A Z
LETTERS[-(2,25)]        				# exclude B Y
